from typing import Any, Generator, Optional

FLOAT_ERROR: float
RGB_TO_COLOR_NAMES: Any
COLOR_NAME_TO_RGB: Any
LONG_HEX_COLOR: Any
SHORT_HEX_COLOR: Any

class C_HSL:
    def __getattr__(self, value: Any): ...

HSL: Any

class C_RGB:
    def __getattr__(self, value: Any): ...

class C_HEX:
    def __getattr__(self, value: Any): ...

RGB: Any
HEX: Any

def hsl2rgb(hsl: Any): ...
def rgb2hsl(rgb: Any): ...
def rgb2hex(rgb: Any, force_long: bool = ...): ...
def hex2rgb(str_rgb: Any): ...
def hex2web(hex: Any): ...
def web2hex(web: Any, force_long: bool = ...): ...

hsl2hex: Any
hex2hsl: Any
rgb2web: Any
web2rgb: Any
web2hsl: Any
hsl2web: Any

def color_scale(begin_hsl: Any, end_hsl: Any, nb: Any): ...
def RGB_color_picker(obj: Any): ...
def hash_or_str(obj: Any): ...

class Color:
    web: Any = ...
    equality: Any = ...
    def __init__(
        self,
        color: Optional[Any] = ...,
        pick_for: Optional[Any] = ...,
        picker: Any = ...,
        pick_key: Any = ...,
        **kwargs: Any
    ): ...
    def __getattr__(self, label: Any): ...
    def __setattr__(self, label: Any, value: Any) -> None: ...
    def get_hsl(self): ...
    def get_hex(self): ...
    def get_hex_l(self): ...
    def get_rgb(self): ...
    def get_hue(self): ...
    def get_saturation(self): ...
    def get_luminance(self): ...
    def get_red(self): ...
    def get_green(self): ...
    def get_blue(self): ...
    def get_web(self): ...
    def set_hsl(self, value: Any) -> None: ...
    hsl: Any = ...
    def set_rgb(self, value: Any) -> None: ...
    def set_hue(self, value: Any) -> None: ...
    def set_saturation(self, value: Any) -> None: ...
    def set_luminance(self, value: Any) -> None: ...
    rgb: Any = ...
    def set_red(self, value: Any) -> None: ...
    def set_green(self, value: Any) -> None: ...
    def set_blue(self, value: Any) -> None: ...
    def set_hex(self, value: Any) -> None: ...
    set_hex_l: Any = ...
    hex: Any = ...
    def set_web(self, value: Any) -> None: ...
    def range_to(self, value: Any, steps: Any) -> Generator: ...
    def __eq__(self, other: Any) -> Any: ...

RGB_equivalence: Any
HSL_equivalence: Any

def make_color_factory(**kwargs_defaults: Any): ...
