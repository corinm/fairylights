from typing import Any, Optional

class Enum: ...
class EnumMeta: ...

def listify(obj: Any): ...

class State:
    dynamic_methods: Any = ...
    ignore_invalid_triggers: Any = ...
    on_enter: Any = ...
    on_exit: Any = ...
    def __init__(
        self,
        name: Any,
        on_enter: Optional[Any] = ...,
        on_exit: Optional[Any] = ...,
        ignore_invalid_triggers: Optional[Any] = ...,
    ) -> None: ...
    @property
    def name(self): ...
    @property
    def value(self): ...
    def enter(self, event_data: Any) -> None: ...
    def exit(self, event_data: Any) -> None: ...
    def add_callback(self, trigger: Any, func: Any) -> None: ...

class Condition:
    func: Any = ...
    target: Any = ...
    def __init__(self, func: Any, target: bool = ...) -> None: ...
    def check(self, event_data: Any): ...

class Transition:
    dynamic_methods: Any = ...
    condition_cls: Any = ...
    source: Any = ...
    dest: Any = ...
    prepare: Any = ...
    before: Any = ...
    after: Any = ...
    conditions: Any = ...
    def __init__(
        self,
        source: Any,
        dest: Any,
        conditions: Optional[Any] = ...,
        unless: Optional[Any] = ...,
        before: Optional[Any] = ...,
        after: Optional[Any] = ...,
        prepare: Optional[Any] = ...,
    ) -> None: ...
    def execute(self, event_data: Any): ...
    def add_callback(self, trigger: Any, func: Any) -> None: ...

class EventData:
    state: Any = ...
    event: Any = ...
    machine: Any = ...
    model: Any = ...
    args: Any = ...
    kwargs: Any = ...
    transition: Any = ...
    error: Any = ...
    result: bool = ...
    def __init__(
        self, state: Any, event: Any, machine: Any, model: Any, args: Any, kwargs: Any
    ) -> None: ...
    def update(self, state: Any) -> None: ...

class Event:
    name: Any = ...
    machine: Any = ...
    transitions: Any = ...
    def __init__(self, name: Any, machine: Any) -> None: ...
    def add_transition(self, transition: Any) -> None: ...
    def trigger(self, model: Any, *args: Any, **kwargs: Any): ...
    def add_callback(self, trigger: Any, func: Any) -> None: ...

class Machine:
    separator: str = ...
    wildcard_all: str = ...
    wildcard_same: str = ...
    state_cls: Any = ...
    transition_cls: Any = ...
    event_cls: Any = ...
    states: Any = ...
    events: Any = ...
    send_event: Any = ...
    auto_transitions: Any = ...
    ignore_invalid_triggers: Any = ...
    name: Any = ...
    model_attribute: Any = ...
    models: Any = ...
    def __init__(
        self,
        model: str = ...,
        states: Optional[Any] = ...,
        initial: str = ...,
        transitions: Optional[Any] = ...,
        send_event: bool = ...,
        auto_transitions: bool = ...,
        ordered_transitions: bool = ...,
        ignore_invalid_triggers: Optional[Any] = ...,
        before_state_change: Optional[Any] = ...,
        after_state_change: Optional[Any] = ...,
        name: Optional[Any] = ...,
        queued: bool = ...,
        prepare_event: Optional[Any] = ...,
        finalize_event: Optional[Any] = ...,
        model_attribute: str = ...,
        on_exception: Optional[Any] = ...,
        **kwargs: Any
    ) -> None: ...
    def add_model(self, model: Any, initial: Optional[Any] = ...) -> None: ...
    def remove_model(self, model: Any) -> None: ...
    @property
    def initial(self): ...
    @initial.setter
    def initial(self, value: Any) -> None: ...
    @property
    def has_queue(self): ...
    @property
    def model(self): ...
    @property
    def before_state_change(self): ...
    @before_state_change.setter
    def before_state_change(self, value: Any) -> None: ...
    @property
    def after_state_change(self): ...
    @after_state_change.setter
    def after_state_change(self, value: Any) -> None: ...
    @property
    def prepare_event(self): ...
    @prepare_event.setter
    def prepare_event(self, value: Any) -> None: ...
    @property
    def finalize_event(self): ...
    @finalize_event.setter
    def finalize_event(self, value: Any) -> None: ...
    @property
    def on_exception(self): ...
    @on_exception.setter
    def on_exception(self, value: Any) -> None: ...
    def get_state(self, state: Any): ...
    def is_state(self, state: Any, model: Any): ...
    def get_model_state(self, model: Any): ...
    def set_state(self, state: Any, model: Optional[Any] = ...) -> None: ...
    def add_state(self, *args: Any, **kwargs: Any) -> None: ...
    def add_states(
        self,
        states: Any,
        on_enter: Optional[Any] = ...,
        on_exit: Optional[Any] = ...,
        ignore_invalid_triggers: Optional[Any] = ...,
        **kwargs: Any
    ) -> None: ...
    def get_triggers(self, *args: Any): ...
    def add_transition(
        self,
        trigger: Any,
        source: Any,
        dest: Any,
        conditions: Optional[Any] = ...,
        unless: Optional[Any] = ...,
        before: Optional[Any] = ...,
        after: Optional[Any] = ...,
        prepare: Optional[Any] = ...,
        **kwargs: Any
    ) -> None: ...
    def add_transitions(self, transitions: Any) -> None: ...
    def add_ordered_transitions(
        self,
        states: Optional[Any] = ...,
        trigger: str = ...,
        loop: bool = ...,
        loop_includes_initial: bool = ...,
        conditions: Optional[Any] = ...,
        unless: Optional[Any] = ...,
        before: Optional[Any] = ...,
        after: Optional[Any] = ...,
        prepare: Optional[Any] = ...,
        **kwargs: Any
    ) -> None: ...
    def get_transitions(
        self, trigger: str = ..., source: str = ..., dest: str = ...
    ): ...
    def remove_transition(
        self, trigger: Any, source: str = ..., dest: str = ...
    ) -> None: ...
    def dispatch(self, trigger: Any, *args: Any, **kwargs: Any): ...
    def callbacks(self, funcs: Any, event_data: Any) -> None: ...
    def callback(self, func: Any, event_data: Any) -> None: ...
    @staticmethod
    def resolve_callable(func: Any, event_data: Any): ...
    def __getattr__(self, name: Any): ...

class MachineError(Exception):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
